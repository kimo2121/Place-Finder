import { useContext, useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Banner from "../components/banner";
import styles from "../styles/Home.module.css";
import Card from "../components/card";
import useTrackLocation from "../hooks/track-location";
import { fetchCoffeeStores } from "../lib/coffee-store";
import { ACTION_TYPES, StoreContext } from "../store/store-context";

export async function getStaticProps(context) {
  const coffeeStoresData = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores: coffeeStoresData.slice(0, 6),
    },
  };
}

export default function Home(props) {
  const { state, dispatch } = useContext(StoreContext);

  const [coffeeStoreError, setCoffeeStoreError] = useState(null);
  const latLong = state.latLong;
  const nearbyStores = state.coffeeStores;

  const { handleTrackLocation, locationErrorMsg, isFindingLocation } =
    useTrackLocation();

  useEffect(() => {
    async function setCoffeeStoresByLocation() {
      if (latLong) {
        try {
          const response = await fetch(
            `/api/getCoffeeStoreByLocation?latLong=${latLong}&limit=30`
          );

          const coffeeStores = await response.json();

          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: { coffeeStores },
          });
        } catch (error) {
          console.log("Error", { error });
          setCoffeeStoreError(error.message);
        }
      }
    }
    setCoffeeStoresByLocation();
  }, [latLong]);

  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Restaurant Connoiseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/restaurant.svg" />
      </Head>
      <main className={styles.main}>
        <Banner
          handleOnClick={handleOnBannerBtnClick}
          buttonText={isFindingLocation ? "Loading..." : "View stores nearby"}
        />
        {locationErrorMsg && <p>Something went wrong: {locationErrorMsg}</p>}
        {coffeeStoreError && <p>Something went wrong: {coffeeStoreError}</p>}
        <div className={styles.heroImage}>
          <Image src="/static/hero.png" width={700} height={400} />
        </div>
        {nearbyStores.length > 0 && (
          <h2 className={styles.heading2}>Nearby Restaurants</h2>
        )}
        {nearbyStores.length > 0 && (
          <>
            <div className={styles.cardLayout}>
              {nearbyStores.map((coffeeStore) => {
                return (
                  <Card
                    latLong={latLong}
                    key={coffeeStore.id}
                    name={coffeeStore.name}
                    imgUrl={
                      coffeeStore?.imgUrl ||
                      "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwzMjc2MTN8MHwxfHNlYXJjaHwxfHxyZXN0YXVyYW50fGVufDB8fHx8MTY1NjUxOTc3Nw&ixlib=rb-1.2.1&q=80&w=400"
                    }
                    href={`/coffee/${coffeeStore?.id}`}
                    className={styles.card}
                  />
                );
              })}
            </div>
          </>
        )}
        <h2 className={styles.heading2}>Downtown Restaurants</h2>
        {props.coffeeStores.length > 0 && (
          <>
            <div className={styles.cardLayout}>
              {props.coffeeStores.map((coffeeStore) => {
                return (
                  <Card
                    key={coffeeStore.id}
                    name={coffeeStore.name}
                    imgUrl={coffeeStore?.imgUrl || "/static/hero.png"}
                    href={`/coffee/${coffeeStore?.id}`}
                    className={styles.card}
                  />
                );
              })}
            </div>
          </>
        )}
      </main>
    </div>
  );
}
